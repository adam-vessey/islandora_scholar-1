<?php

/**
 * @file
 * Date parser test, ported from citeproc-js.
 *
 * @see https://bitbucket.org/fbennett/citeproc-js/src/6afa1a71f58e4a0063f1d14b1242a98dd1c8a6b6/tests/citeproc-js/dateparse.js?at=default
 */

require_once "includes/CSLDateparser.php";

class CSLDateParserTest extends PHPUnit_Framework_TestCase {
  function setUp() {
    // Clean up and set default used in tests.
    CSLDateParser::getInstance(NULL, TRUE)->returnAsKeys();
  }
  function test_dateparse001() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Wed 24 Oct 2000");
      $this->assertEquals("10", $res["month"]);
      $this->assertEquals("24", $res["day"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse002() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("\u5e73\u621012\u5e7410\u670824\u65e5");
      $this->assertEquals("10", $res["month"]);
      $this->assertEquals("24", $res["day"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse003() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("19??-10");
      $this->assertEquals("10", $res["month"]);
      $this->assertEquals("19??", $res["year"]);
      $this->assertEquals(2, count($res) );
  }
  function test_dateparse004() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("myauntsally 23");
      $this->assertEquals("myauntsally 23", $res["literal"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse005() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("\"[Dec 23, 2009]\"");
      $this->assertEquals("[Dec 23, 2009]", $res["literal"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse006() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug 31, 2000");
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse007() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("31 Aug 2000");
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse008() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("08-31-2000");
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse009() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("2000-8-31");
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(3, count($res) );
  }
  function test_dateparse010() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Sum 2000");
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("14", $res["month"]);
      $this->assertEquals(2, count($res) );
  }
  function test_dateparse011() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Trinity 2001");
      $this->assertEquals("Trinity", $res["season"]);
      $this->assertEquals("2001", $res["year"]);
      $this->assertEquals(2, count($res) );
  }
  function test_dateparse012() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Spring 2000 - Summer 2001");
      $this->assertEquals("14", $res["month_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("2001", $res["year_end"]);
      $this->assertEquals("13", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse013() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("circa 08-31-2000");
      $this->assertEquals("1", $res["circa"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse014() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("circa 2000-31-08");
      $this->assertEquals("1", $res["circa"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse015() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("circa Aug 31, 2000");
      $this->assertEquals("1", $res["circa"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse016() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug 31 2000 ?");
      $this->assertEquals("1", $res["circa"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse017() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("[31 Aug 2000?]");
      $this->assertEquals("1", $res["circa"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("31", $res["day"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse018() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("200BC");
      $this->assertEquals("-200", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse019() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("200bc");
      $this->assertEquals("-200", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse020() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("200 b.c.");
      $this->assertEquals("-200", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse021() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("250AD");
      $this->assertEquals("250", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse022() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("250ad");
      $this->assertEquals("250", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse023() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("250 a.d.");
      $this->assertEquals("250", $res["year"]);
      $this->assertEquals(1, count($res) );
  }
  function test_dateparse024() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("2000-2001");
      $this->assertEquals("2001", $res["year_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals(2, count($res) );
  }
  function test_dateparse025() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug - Sep 2000");
      $this->assertEquals("9", $res["month_end"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals("2000", $res["year_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse026() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug 15-20 2000");
      $this->assertEquals("2000", $res["year_end"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals("20", $res["day_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("8", $res["month_end"]);
      $this->assertEquals("15", $res["day"]);
      $this->assertEquals(6, count($res) );
  }
  function test_dateparse027() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug 2000-Sep 2000");
      $this->assertEquals("9", $res["month_end"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals("2000", $res["year_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse028() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("\u5e73\u621012\u5e748\u6708\u301c\u5e73\u621012\u5e749\u6708");
      $this->assertEquals("9", $res["month_end"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("2000", $res["year_end"]);
      $this->assertEquals(4, count($res) );
  }
  function test_dateparse029() {
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("Aug 15 2000 - Aug 20 2000");
      $this->assertEquals("2000", $res["year_end"]);
      $this->assertEquals("8", $res["month"]);
      $this->assertEquals("20", $res["day_end"]);
      $this->assertEquals("2000", $res["year"]);
      $this->assertEquals("8", $res["month_end"]);
      $this->assertEquals("15", $res["day"]);
      $this->assertEquals(6, count($res) );
  }
  function test_dateparse030() {
      CSLDateParser::getInstance(NULL, FALSE)->returnAsArray();
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("May 1 2000");
      $this->assertEquals("2000", $res["date-parts"][0][0]);
      $this->assertEquals("5", $res["date-parts"][0][1]);
      $this->assertEquals("1", $res["date-parts"][0][2]);
  }
  function test_dateparse031() {
      CSLDateParser::getInstance(NULL, FALSE)->returnAsArray();
      $res = CSLDateParser::getInstance(NULL, FALSE)->parse("June 3 1998 - 1999");
      $this->assertEquals("1998", $res["date-parts"][0][0]);
      $this->assertEquals("6", $res["date-parts"][0][1]);
      $this->assertEquals("3", $res["date-parts"][0][2]);
      $this->assertEquals("1999", $res["date-parts"][1][0]);
      $this->assertEquals("6", $res["date-parts"][1][1]);
      $this->assertEquals("3", $res["date-parts"][1][2]);
  }
  function test_dateparse032() {
      $res = array(
        'year' => 2000,
        'month' => 7,
        'day' => 21,
        'year_end' => 2001,
      );
      $res = CSLDateParser::getInstance(NULL, FALSE)->toArray($res);
      $this->assertEquals("2000", $res["date-parts"][0][0]);
      $this->assertEquals("7", $res["date-parts"][0][1]);
      $this->assertEquals("21", $res["date-parts"][0][2]);
      $this->assertEquals(1, count($res["date-parts"]));
  }
}
